import pytest
import nfem
import numpy as np
from numpy.testing import assert_almost_equal


@pytest.fixture
def model_1():
    model = nfem.Model()

    model.add_node(id='A', x=0, y=0, z=0, support='xyz')
    model.add_node(id='B', x=1, y=1, z=0, support='z', fy=-1)
    model.add_node(id='C', x=2, y=0, z=0, support='xyz')

    model.add_truss_element(id=1, node_a='A', node_b='B', youngs_modulus=1, area=1)
    model.add_truss_element(id=2, node_a='B', node_b='C', youngs_modulus=1, area=1)

    return model


@pytest.fixture
def model_2():
    model = nfem.Model()

    model.add_node(id='A', x=0, y=0, z=0, support='xyz')
    model.add_node(id='B', x=1, y=1, z=0, support='z')
    model.add_node(id='C', x=2, y=2, z=0, support='z', fy = -1)
    model.add_node(id='D', x=3, y=1, z=0, support='z')
    model.add_node(id='E', x=4, y=0, z=0, support='xyz')

    model.add_truss_element(id=1, node_a='A', node_b='B', youngs_modulus=1, area=1)
    model.add_truss_element(id=2, node_a='B', node_b='C', youngs_modulus=1, area=1)
    model.add_truss_element(id=3, node_a='C', node_b='D', youngs_modulus=1, area=1)
    model.add_truss_element(id=4, node_a='D', node_b='E', youngs_modulus=1, area=1)
    model.add_truss_element(id=5, node_a='B', node_b='D', youngs_modulus=1, area=1)
    model.add_truss_element(id=6, node_a='A', node_b='D', youngs_modulus=1, area=1)
    model.add_truss_element(id=7, node_a='B', node_b='E', youngs_modulus=1, area=1)

    return model


@pytest.fixture
def model_3():
    model = nfem.Model()

    model.add_node(id='A', x=0, y=0, z=0, support='xyz')
    model.add_node(id='B', x=1, y=1, z=0, support='z', fy = -0.25)
    model.add_node(id='C', x=2, y=2, z=0, support='z', fy = -0.5)
    model.add_node(id='D', x=3, y=1, z=0, support='z', fy = -0.25)
    model.add_node(id='E', x=4, y=0, z=0, support='xyz')

    model.add_truss_element(id=1, node_a='A', node_b='B', youngs_modulus=1, area=1)
    model.add_truss_element(id=2, node_a='B', node_b='C', youngs_modulus=1, area=1)
    model.add_truss_element(id=3, node_a='C', node_b='D', youngs_modulus=1, area=1)
    model.add_truss_element(id=4, node_a='D', node_b='E', youngs_modulus=1, area=1)
    model.add_truss_element(id=5, node_a='B', node_b='D', youngs_modulus=1, area=1)
    model.add_truss_element(id=6, node_a='A', node_b='D', youngs_modulus=1, area=1)
    model.add_truss_element(id=7, node_a='B', node_b='E', youngs_modulus=1, area=1)

    return model


def test_1a(model_1):
    load_curve = np.linspace(0.0, 0.5, 20)

    for load_factor in load_curve:
        model_1 = model_1.get_duplicate()
        model_1.lam = load_factor
        model_1.perform_non_linear_solution_step(strategy='load-control', max_iterations=1000)

    actual = model_1.load_displacement_curve(('B', 'v'), skip_iterations=False)

    assert_almost_equal(actual.T, [
        [0.0, 0.0],
        [0.0, 0.0],
        [0.0, 0.0],
        [0.0, 0.02631578947368421],
        [0.0, 0.02631578947368421],
        [-0.037216146378239334, 0.02631578947368421],
        [-0.03952041666643302, 0.02631578947368421],
        [-0.03952041666643302, 0.05263157894736842],
        [-0.03952041666643302, 0.05263157894736842],
        [-0.08163920558658533, 0.05263157894736842],
        [-0.08493097451298937, 0.05263157894736842],
        [-0.0849506945068984, 0.05263157894736842],
        [-0.0849506945068984, 0.07894736842105263],
        [-0.0849506945068984, 0.07894736842105263],
        [-0.13418017020647843, 0.07894736842105263],
        [-0.13941157589787978, 0.07894736842105263],
        [-0.13946963851813954, 0.07894736842105263],
        [-0.13946963851813954, 0.10526315789473684],
        [-0.13946963851813954, 0.10526315789473684],
        [-0.20040293029660572, 0.10526315789473684],
        [-0.2105970344636362, 0.10526315789473684],
        [-0.21088252115768313, 0.10526315789473684],
        [-0.21088252115768313, 0.13157894736842105],
        [-0.21088252115768313, 0.13157894736842105],
        [-0.2966224597836351, 0.13157894736842105],
        [-0.3312614798169804, 0.13157894736842105],
        [-0.3385508831871511, 0.13157894736842105],
        [-0.33889071844629526, 0.13157894736842105],
        [-0.33889071844629526, 0.15789473684210525],
        [-0.33889071844629526, 0.15789473684210525],
        [-0.5780725045174675, 0.15789473684210525],
        [-0.3639230727553442, 0.15789473684210525],
        [-0.6813949960898609, 0.15789473684210525],
        [-0.450860988294965, 0.15789473684210525],
        [0.2104590977565972, 0.15789473684210525],
        [-0.08689715842559931, 0.15789473684210525],
        [-0.2832619292202595, 0.15789473684210525],
        [-0.46446016169663595, 0.15789473684210525],
        [-0.001334362566193903, 0.15789473684210525],
        [-0.22419106759876684, 0.15789473684210525],
        [-0.39514654745722844, 0.15789473684210525],
        [-1.041266567313912, 0.15789473684210525],
        [-0.5509717046486476, 0.15789473684210525],
        [-0.3279982973107921, 0.15789473684210525],
        [-0.5480317234572022, 0.15789473684210525],
        [-0.32345197711102125, 0.15789473684210525],
        [-0.5370740045266802, 0.15789473684210525],
        [-0.30500076135023035, 0.15789473684210525],
        [-0.4993923591830066, 0.15789473684210525],
        [-0.2115224238370068, 0.15789473684210525],
        [-0.38296137461600277, 0.15789473684210525],
        [-0.8364060104826971, 0.15789473684210525],
        [-0.5239404362933113, 0.15789473684210525],
        [-0.2789407438753063, 0.15789473684210525],
        [-0.45835479308034266, 0.15789473684210525],
        [0.0743952074008758, 0.15789473684210525],
        [-0.17424711222595546, 0.15789473684210525],
        [-0.3501218111183444, 0.15789473684210525],
        [-0.6167118533298068, 0.15789473684210525],
        [-0.40283614039156246, 0.15789473684210525],
        [-1.296371795217285, 0.15789473684210525],
        [-0.3229273163539206, 0.15789473684210525],
        [-0.5358597271973156, 0.15789473684210525],
        [-0.3027908468853332, 0.15789473684210525],
        [-0.4954551380983797, 0.15789473684210525],
        [-0.19715809886892932, 0.15789473684210525],
        [-0.36984064631085645, 0.15789473684210525],
        [-0.7183526448044204, 0.15789473684210525],
        [-0.4725755182022968, 0.15789473684210525],
        [-0.07439870876829191, 0.15789473684210525],
        [-0.2743651993462628, 0.15789473684210525],
        [-0.45212965139442574, 0.15789473684210525],
        [0.18268623965942488, 0.15789473684210525],
        [-0.10458442096718457, 0.15789473684210525],
        [-0.29606902175863126, 0.15789473684210525],
        [-0.4840715123531416, 0.15789473684210525],
        [-0.146543054410172, 0.15789473684210525],
        [-0.32777100550702276, 0.15789473684210525],
        [-0.5474643907007387, 0.15789473684210525],
        [-0.32255658108174745, 0.15789473684210525],
        [-0.535007626122239, 0.15789473684210525],
        [-0.3012181531346052, 0.15789473684210525],
        [-0.4927143823552069, 0.15789473684210525],
        [-0.1863227589639529, 0.15789473684210525],
        [-0.3603505996508243, 0.15789473684210525],
        [-0.6622039649441367, 0.15789473684210525],
        [-0.4381710147423752, 0.15789473684210525],
        [0.7326764818483626, 0.15789473684210525],
        [0.24361120350758725, 0.15789473684210525],
        [-0.06584036317436492, 0.15789473684210525],
        [-0.26833729301928244, 0.15789473684210525],
        [-0.4442677721852384, 0.15789473684210525],
        [0.4061488875153898, 0.15789473684210525],
        [0.03695860853793076, 0.15789473684210525],
        [-0.19875332109374155, 0.15789473684210525],
        [-0.3712656092919665, 0.15789473684210525],
        [-0.7284199964372385, 0.15789473684210525],
        [-0.47795629502974624, 0.15789473684210525],
        [-0.11162757105904575, 0.15789473684210525],
        [-0.3012492652485671, 0.15789473684210525],
        [-0.49276812400640757, 0.15789473684210525],
        [-0.18654243926414016, 0.15789473684210525],
        [-0.36053991362271665, 0.15789473684210525],
        [-0.6631708326572536, 0.15789473684210525],
        [-0.4388370428826349, 0.15789473684210525],
        [0.6851451250389942, 0.15789473684210525],
        [0.21344518107350297, 0.15789473684210525],
        [-0.08499825615757717, 0.15789473684210525],
        [-0.28190260568128467, 0.15789473684210525],
        [-0.4625145957095729, 0.15789473684210525],
        [0.02037464596571481, 0.15789473684210525],
        [-0.2097164476153185, 0.15789473684210525],
        [-0.3812740178699443, 0.15789473684210525],
        [-0.8172647629267342, 0.15789473684210525],
        [-0.5172498764783693, 0.15789473684210525],
        [-0.26348333069732965, 0.15789473684210525],
        [-0.43818963449570725, 0.15789473684210525],
        [0.7312926881239905, 0.15789473684210525],
        [0.24273247132766773, 0.15789473684210525],
        [-0.06639784546764904, 0.15789473684210525],
        [-0.2687284624241306, 0.15789473684210525],
        [-0.44476704158247304, 0.15789473684210525],
        [0.3873127368044562, 0.15789473684210525],
        [0.0250616742558889, 0.15789473684210525],
        [-0.20661034826109814, 0.15789473684210525],
        [-0.3783984793998938, 0.15789473684210525],
        [-0.7878587278199789, 0.15789473684210525],
        [-0.5057743465044013, 0.15789473684210525],
        [-0.23226808980110514, 0.15789473684210525],
        [-0.4032732494488491, 0.15789473684210525],
        [-1.3168639911654534, 0.15789473684210525],
        [-0.2698512846358072, 0.15789473684210525],
        [-0.44620831637682545, 0.15789473684210525],
        [0.3373596378670711, 0.15789473684210525],
        [-0.006498167542900113, 0.15789473684210525],
        [-0.22765746273791831, 0.15789473684210525],
        [-0.3985971906979129, 0.15789473684210525],
        [-1.1358704412908147, 0.15789473684210525],
        [-0.5219120720670678, 0.15789473684210525],
        [-0.27443354325456926, 0.15789473684210525],
        [-0.45222093159505417, 0.15789473684210525],
        [0.18077789945416356, 0.15789473684210525],
        [-0.1058016599280015, 0.15789473684210525],
        [-0.2969608087037454, 0.15789473684210525],
        [-0.4855338224223197, 0.15789473684210525],
        [-0.15396644567819562, 0.15789473684210525],
        [-0.3336271228044718, 0.15789473684210525],
        [-0.5628118162016543, 0.15789473684210525],
        [-0.3448863632792494, 0.15789473684210525],
        [-0.5975205004420913, 0.15789473684210525],
        [-0.3848643354940936, 0.15789473684210525],
        [-0.8599531009290817, 0.15789473684210525],
        [-0.5313230917099094, 0.15789473684210525],
        [-0.294198846279617, 0.15789473684210525],
        [-0.48104931206210444, 0.15789473684210525],
        [-0.13012834586376598, 0.15789473684210525],
        [-0.3151111375309492, 0.15789473684210525],
        [-0.5188534710888079, 0.15789473684210525],
        [-0.2673474203258983, 0.15789473684210525],
        [-0.4430108013340974, 0.15789473684210525],
        [0.45760992865581196, 0.15789473684210525],
        [0.0694619307693376, 0.15789473684210525],
        [-0.17745982621720724, 0.15789473684210525],
        [-0.3528104406327327, 0.15789473684210525],
        [-0.6275279561822749, 0.15789473684210525],
        [-0.4120464033156497, 0.15789473684210525],
        [-2.0816539131903435, 0.15789473684210525],
        [-2.18633408107005, 0.15789473684210525],
        [-2.1749426224209496, 0.15789473684210525],
        [-2.1747960805753337, 0.15789473684210525],
        [-2.1747960805753337, 0.18421052631578946],
        [-2.1747960805753337, 0.18421052631578946],
        [-2.1984973060371313, 0.18421052631578946],
        [-2.1978950033422024, 0.18421052631578946],
        [-2.1978950033422024, 0.21052631578947367],
        [-2.1978950033422024, 0.21052631578947367],
        [-2.2204166983813773, 0.21052631578947367],
        [-2.219887833286069, 0.21052631578947367],
        [-2.219887833286069, 0.23684210526315788],
        [-2.219887833286069, 0.23684210526315788],
        [-2.2413725696109945, 0.23684210526315788],
        [-2.240903569524872, 0.23684210526315788],
        [-2.240903569524872, 0.2631578947368421],
        [-2.240903569524872, 0.2631578947368421],
        [-2.2614674483662673, 0.2631578947368421],
        [-2.2610480069336716, 0.2631578947368421],
        [-2.2610480069336716, 0.2894736842105263],
        [-2.2610480069336716, 0.2894736842105263],
        [-2.28078734162623, 0.2894736842105263],
        [-2.2804094618540383, 0.2894736842105263],
        [-2.2804094618540383, 0.3157894736842105],
        [-2.2804094618540383, 0.3157894736842105],
        [-2.2994051707357195, 0.3157894736842105],
        [-2.299062541538294, 0.3157894736842105],
        [-2.299062541538294, 0.3421052631578947],
        [-2.299062541538294, 0.3421052631578947],
        [-2.3173833651133533, 0.3421052631578947],
        [-2.3170709316173124, 0.3421052631578947],
        [-2.3170709316173124, 0.3684210526315789],
        [-2.3170709316173124, 0.3684210526315789],
        [-2.3347758364265223, 0.3684210526315789],
        [-2.334489496743919, 0.3684210526315789],
        [-2.334489496743919, 0.39473684210526316],
        [-2.334489496743919, 0.39473684210526316],
        [-2.3516295034840184, 0.39473684210526316],
        [-2.3513658902417993, 0.39473684210526316],
        [-2.3513658902417993, 0.42105263157894735],
        [-2.3513658902417993, 0.42105263157894735],
        [-2.3679854858927984, 0.42105263157894735],
        [-2.367741805903344, 0.42105263157894735],
        [-2.367741805903344, 0.4473684210526315],
        [-2.367741805903344, 0.4473684210526315],
        [-2.38388004979955, 0.4473684210526315],
        [-2.383653964449533, 0.4473684210526315],
        [-2.383653964449533, 0.47368421052631576],
        [-2.383653964449533, 0.47368421052631576],
        [-2.3993453655032857, 0.47368421052631576],
        [-2.399134900192462, 0.47368421052631576],
        [-2.399134900192462, 0.5],
        [-2.399134900192462, 0.5],
        [-2.4144101204941957, 0.5],
        [-2.4142135951481647, 0.5],
    ])


def test_1b(model_1):
    displacement_curve = np.linspace(-0.1, -2.4, 23)

    for u_hat in displacement_curve:
        model_1 = model_1.get_duplicate()
        model_1.predict_tangential(strategy='dof', dof=('B', 'v'), value=u_hat)
        model_1.perform_non_linear_solution_step(strategy='displacement-control', dof=('B', 'v'))

    actual = model_1.load_displacement_curve(('B', 'v'), skip_iterations=False)

    assert_almost_equal(actual.T, [
        [0.0, 0.0],
        [-0.09999999999999998, 0.07071067811865474],
        [-0.09999999999999998, 0.07071067811865474],
        [-0.09999999999999998, 0.06045762979144984],
        [-0.20454545454545459, 0.11331386168514426],
        [-0.20454545454545459, 0.11331386168514426],
        [-0.20454545454545459, 0.10328437411853902],
        [-0.3090909090909091, 0.1364856207459788],
        [-0.3090909090909091, 0.1364856207459788],
        [-0.3090909090909091, 0.12766810278024165],
        [-0.4136363636363636, 0.14363830334316335],
        [-0.4136363636363636, 0.14363830334316335],
        [-0.4136363636363636, 0.13603275497829462],
        [-0.5181818181818182, 0.1371958486784347],
        [-0.5181818181818182, 0.1371958486784347],
        [-0.5181818181818182, 0.13080226991443403],
        [-0.6227272727272727, 0.119582195953529],
        [-0.6227272727272727, 0.119582195953529],
        [-0.6227272727272727, 0.11440058679039662],
        [-0.7272727272727272, 0.09322128437018297],
        [-0.7272727272727272, 0.09322128437018297],
        [-0.7272727272727272, 0.08925164480791892],
        [-0.8318181818181818, 0.0605370531301331],
        [-0.8318181818181818, 0.0605370531301331],
        [-0.8318181818181818, 0.05777938316873723],
        [-0.9363636363636363, 0.02395344143511579],
        [-0.9363636363636363, 0.02395344143511579],
        [-0.9363636363636363, 0.022407741074588153],
        [-1.0409090909090908, -0.014105611513132426],
        [-1.0409090909090908, -0.014105611513132426],
        [-1.0409090909090908, -0.0144393422727918],
        [-1.1454545454545455, -0.051216166512875125],
        [-1.1454545454545455, -0.051216166512875125],
        [-1.1454545454545455, -0.05033792767166625],
        [-1.25, -0.08495428436237566],
        [-1.25, -0.08495428436237566],
        [-1.25, -0.08286407592029854],
        [-1.3545454545454545, -0.11289602585989764],
        [-1.3545454545454545, -0.11289602585989764],
        [-1.3545454545454545, -0.10959384781695235],
        [-1.459090909090909, -0.13261745180370466],
        [-1.459090909090909, -0.13261745180370466],
        [-1.459090909090909, -0.128103304159891],
        [-1.5636363636363637, -0.14169462299206],
        [-1.5636363636363637, -0.14169462299206],
        [-1.5636363636363637, -0.13596850574737812],
        [-1.6681818181818182, -0.1377036002232273],
        [-1.6681818181818182, -0.1377036002232273],
        [-1.6681818181818182, -0.1307655133776773],
        [-1.7727272727272727, -0.11822044429547021],
        [-1.7727272727272727, -0.11822044429547021],
        [-1.7727272727272727, -0.11007038784905172],
        [-1.8772727272727272, -0.08082121600705186],
        [-1.8772727272727272, -0.08082121600705186],
        [-1.8772727272727272, -0.07145918995976545],
        [-1.9818181818181817, -0.023081976156236368],
        [-1.9818181818181817, -0.023081976156236368],
        [-1.9818181818181817, -0.01250798050808154],
        [-2.0863636363636364, 0.05742121445871347],
        [-2.0863636363636364, 0.05742121445871347],
        [-2.0863636363636364, 0.06920717970773678],
        [-2.190909090909091, 0.16311229503953392],
        [-2.190909090909091, 0.16311229503953392],
        [-2.190909090909091, 0.1761102298894249],
        [-2.2954545454545454, 0.29641520478796074],
        [-2.2954545454545454, 0.29641520478796074],
        [-2.2954545454545454, 0.31062510923872066],
        [-2.4, 0.4597538829057317],
        [-2.4, 0.4597538829057317],
        [-2.4, 0.47517575695735953],
    ])


def test_1c(model_1):
    number_of_steps = 26

    model_1 = model_1.get_duplicate()
    model_1.predict_tangential(strategy='lambda', value=0.05)
    model_1.perform_non_linear_solution_step(strategy='load-control')

    for step in range(1, number_of_steps):
        model_1 = model_1.get_duplicate()
        model_1.predict_tangential(strategy='arc-length')
        model_1.perform_non_linear_solution_step(strategy='arc-length-control')

    actual = model_1.load_displacement_curve(('B', 'v'), skip_iterations=False)

    assert_almost_equal(actual.T, [
        [0.0, 0.0],
        [-0.07071067811865472, 0.05],
        [-0.07071067811865472, 0.05],
        [-0.0799180181436876, 0.05],
        [-0.08007101451913168, 0.05],
        [-0.1629932758233238, 0.09511392186811382],
        [-0.1629932758233238, 0.09511392186811382],
        [-0.165914671492015, 0.08974421059095329],
        [-0.16573287224914324, 0.0896667687689175],
        [-0.2538393786673234, 0.12355850730660084],
        [-0.2538393786673234, 0.12355850730660084],
        [-0.25617570700920167, 0.11748488178810475],
        [-0.25595850772428896, 0.11742989748727949],
        [-0.3478836657768999, 0.1389059755773012],
        [-0.3478836657768999, 0.1389059755773012],
        [-0.34934422671654386, 0.13265426170945907],
        [-0.349127163476182, 0.13263206206296055],
        [-0.44309787801999145, 0.1416325637449069],
        [-0.44309787801999145, 0.1416325637449069],
        [-0.4436549845955584, 0.1358160320855562],
        [-0.4434742425041944, 0.1358204140177694],
        [-0.5378455874464767, 0.13345690749344497],
        [-0.5378455874464767, 0.13345690749344497],
        [-0.5377217614854098, 0.12851271869413797],
        [-0.5375932587236587, 0.12852901677354145],
        [-0.6312448457741355, 0.1166574570268241],
        [-0.6312448457741355, 0.1166574570268241],
        [-0.6307495157060038, 0.11274992945807422],
        [-0.630669076843151, 0.11276664008296086],
        [-0.7230758855025893, 0.09346528906997387],
        [-0.7230758855025893, 0.09346528906997387],
        [-0.7224699213891017, 0.09056418593725264],
        [-0.8136095988261282, 0.06578711536551521],
        [-0.8136095988261282, 0.06578711536551521],
        [-0.8130645356257751, 0.0637821614659351],
        [-0.9031317901081133, 0.0352768876821659],
        [-0.9031317901081133, 0.0352768876821659],
        [-0.9027463877297923, 0.034059143402646076],
        [-0.9921002448446076, 0.0033641826060818864],
        [-0.9921002448446076, 0.0033641826060818864],
        [-0.9919252198133037, 0.0028546800286948634],
        [-1.0810043138878769, -0.02863337524769121],
        [-1.0810043138878769, -0.02863337524769121],
        [-1.0810616100493826, -0.02847128552458545],
        [-1.1703327318982564, -0.05941121096094333],
        [-1.1703327318982564, -0.05941121096094333],
        [-1.1706247201242377, -0.0585687358698628],
        [-1.260544399504162, -0.0875835331943081],
        [-1.260544399504162, -0.0875835331943081],
        [-1.2610532802189107, -0.08600646235692966],
        [-1.3520228118307818, -0.11159352224844091],
        [-1.3520228118307818, -0.11159352224844091],
        [-1.3526998927652092, -0.10918630017097868],
        [-1.4449933082960529, -0.12963946427700396],
        [-1.4449933082960529, -0.12963946427700396],
        [-1.445737450429139, -0.12628157702068984],
        [-1.4456755509463124, -0.12627247506412628],
        [-1.5392577667680856, -0.13964331155911244],
        [-1.5392577667680856, -0.13964331155911244],
        [-1.539886603027693, -0.13524209922021316],
        [-1.5397821626863664, -0.13523723635083654],
        [-1.6342212888908998, -0.13944113452338855],
        [-1.6342212888908998, -0.13944113452338855],
        [-1.6344626300078762, -0.1340194893576483],
        [-1.6343072400059069, -0.1340308570025608],
        [-1.728587773179875, -0.12712965001904541],
        [-1.728587773179875, -0.12712965001904541],
        [-1.7281352756190123, -0.1209478746571443],
        [-1.7279363143786957, -0.1209892572698746],
        [-1.8204795313220474, -0.1016957379105527],
        [-1.8204795313220474, -0.1016957379105527],
        [-1.8191429882025019, -0.09528488058780676],
        [-1.818929044269624, -0.09535994971252389],
        [-1.9079372083943091, -0.06351524814341122],
        [-1.9079372083943091, -0.06351524814341122],
        [-1.9057866913518704, -0.05750440287136849],
        [-1.9055936197995942, -0.05759970598462228],
        [-1.9895924085028303, -0.014231651444793658],
        [-1.9895924085028303, -0.014231651444793658],
        [-1.9869277269580736, -0.009070478678008378],
        [-1.9867769956588144, -0.009165463095472401],
        [-2.0649769515964636, 0.04395123194002734],
        [-2.0649769515964636, 0.04395123194002734],
        [-2.0621472783007384, 0.04811715993866785],
        [-2.062040546436369, 0.048036217542960925],
        [-2.1343258400609804, 0.10895805820056585],
        [-2.1343258400609804, 0.10895805820056585],
        [-2.1315868579740638, 0.11220792921969751],
        [-2.1315151446002294, 0.11214490391597831],
        [-2.198212487160495, 0.17913824652479565],
        [-2.198212487160495, 0.17913824652479565],
        [-2.195697820538466, 0.18164180246905834],
        [-2.195650552392545, 0.18159486693281035],
        [-2.2572917109846937, 0.2532678427545493],
        [-2.2572917109846937, 0.2532678427545493],
        [-2.255046598754082, 0.2551987144321607],
        [-2.2550153925268908, 0.2551643293999822],
    ])


def test_2(model_2):
    model_2.predict_tangential(strategy='lambda', value=0.03)
    model_2.perform_non_linear_solution_step(strategy='load-control')

    for step in range(1, 120):
        model_2 = model_2.get_duplicate()
        model_2.predict_tangential(strategy='arc-length')
        model_2.perform_non_linear_solution_step(strategy='arc-length-control')

    actual = model_2.load_displacement_curve(('B', 'v'), skip_iterations=False)

    assert_almost_equal(actual.T, [
        [-0.03668411320748388, 0.03],
        [-0.03668411320748388, 0.03],
        [-0.03879392396600667, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
        [-0.03879968834562708, 0.03],
    ])


def test_3(model_3):
    model_3.predict_tangential(strategy='lambda', value=0.03)
    model_3.perform_non_linear_solution_step(strategy='load-control')

    for step in range(1, 120):
        model_3 = model_3.get_duplicate()
        model_3.predict_tangential(strategy='arc-length')
        model_3.perform_non_linear_solution_step(strategy='arc-length-control')

    actual = model_3.load_displacement_curve(('B', 'v'), skip_iterations=False)

    assert_almost_equal(actual.T, [
        [-0.04012369841831065, 0.03],
        [-0.04012369841831065, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
        [-0.04294448569210396, 0.03],
    ])
