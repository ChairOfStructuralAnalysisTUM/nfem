"""
This is a test for the TRUSS element with green-lagrange strain compared with TRUSS.excel
"""
# add the path to the nfem tool to the PATH.
import sys
sys.path.append('..') 
# import necessary modules
import numpy as np

from nfem import *

#======================================
# Preprocessing
#======================================
model = Model('one_element')

model.add_node(id='A', x=0, y=0, z=0)
model.add_node(id='B', x=1, y=2, z=3)

model.add_truss_element(id=1, node_a='A', node_b='B', youngs_modulus=1, area=1)

model.add_single_load(id='load 1', node_id='B', fv=-1)

model.add_dirichlet_condition(node_id='A', dof_types='uvw', value=0)
model.add_dirichlet_condition(node_id='B', dof_types='uvw', value=0)

#======================================
# Preprocessing
#======================================
model._nodes['B'].x += 0.1

element = model._elements[1]

k_e = element.calculate_elastic_stiffness_matrix()
k_u = element.calculate_initial_displacement_stiffness_matrix()
k_g = element.calculate_geometric_stiffness_matrix()
k = element.calculate_stiffness_matrix()


# reference values copied from TRUSS
k_e_ref = np.matrix([[0.019090089,	0.038180177,	0.057270266,	-0.019090089,	-0.038180177,	-0.057270266],
                    [0.038180177,	0.076360355,	0.114540532,	-0.038180177,	-0.076360355,	-0.114540532],
                    [0.057270266,	0.114540532,	0.171810798,	-0.057270266,	-0.114540532,	-0.171810798],
                    [-0.019090089,	-0.038180177,	-0.057270266,	0.019090089,	0.038180177,	0.057270266],
                    [-0.038180177,	-0.076360355,	-0.114540532,	0.038180177,	0.076360355,	0.114540532],
                    [-0.057270266,	-0.114540532,	-0.171810798,	0.057270266,	0.114540532,	0.171810798]])

k_u_ref = np.matrix([[0.004008918628686,	0.003818017741606,	0.005727026612409,	-0.004008918628686,	-0.003818017741606,	-0.005727026612409],
                    [0.003818017741606,	0.000000000000000,	0.000000000000000,	-0.003818017741606,	0.000000000000000,	0.000000000000000],
                    [0.005727026612409,	0.000000000000000,	0.000000000000000,	-0.005727026612409,	0.000000000000000,	0.000000000000000],
                    [-0.004008918628686,	-0.003818017741606,	-0.005727026612409,	0.004008918628686,	0.003818017741606,	0.005727026612409],
                    [-0.003818017741606,	0.000000000000000,	0.000000000000000,	0.003818017741606,	0.000000000000000,	0.000000000000000],
                    [-0.005727026612409,	0.000000000000000,	0.000000000000000,	0.005727026612409,	0.000000000000000,	0.000000000000000]])

k_g_ref = np.matrix([[2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00,	-2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00],
                     [0.00000000000E+00,	2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00,	-2.00445931434E-03,	0.00000000000E+00],
                     [0.00000000000E+00,	0.00000000000E+00,	2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00,	-2.00445931434E-03],
                     [-2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00,	2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00],
                     [0.00000000000E+00,	-2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00,	2.00445931434E-03,	0.00000000000E+00],
                     [0.00000000000E+00,	0.00000000000E+00,	-2.00445931434E-03,	0.00000000000E+00,	0.00000000000E+00,	2.00445931434E-03]])


assert(np.allclose(k_e, k_e_ref, rtol=1e-12))
assert(np.allclose(k_u, k_u_ref, rtol=1e-12))
assert(np.allclose(k_g, k_g_ref, rtol=1e-12))
assert(np.allclose(k, k_e_ref+k_u_ref+k_g_ref, rtol=1e-12))

print("Stiffness matrix test passed succesfully!!")